name: Generate JSON/YAML from XLSX and Update Sitemap

on:
  push:
    branches:
      - main
    paths:
      - 'templates/*.xlsx'

jobs:
  generate-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install pandas openpyxl PyYAML

      - name: Get Changed XLSX Files via Git Diff
        id: get_files
        run: |
          echo "üìÑ Comparing against base commit: ${{ github.event.before }}"
          BEFORE_COMMIT=${{ github.event.before }}
          if [[ "$BEFORE_COMMIT" == "0000000000000000000000000000000000000000" ]]; then
            BEFORE_COMMIT=4b825dc642cb6eb9a060e54bf8d69288fbee4904
          fi

          CHANGED_FILES=$(git diff --name-only --diff-filter=AM "$BEFORE_COMMIT" HEAD | grep '^templates/.*\.xlsx$' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "‚ö†Ô∏è No .xlsx files detected in templates/ in this push."
          else
            echo "‚úÖ Detected changed XLSX files:"
            echo "$CHANGED_FILES"
          fi

          echo "changed_xlsx=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Process Each XLSX File
        if: env.changed_xlsx != ''
        run: |
          echo "‚öôÔ∏è Processing detected XLSX files..."
          while IFS= read -r xlsx_file; do
            if [ -n "$xlsx_file" ] && [ -f "$xlsx_file" ]; then
              echo "üìÑ Processing: $xlsx_file"
              python ai-generators/generate_files_from_xlsx.py --input "$xlsx_file"
            else
              echo "‚ùå ERROR: File not found: '$xlsx_file'"
            fi
          done <<< "${{ env.changed_xlsx }}"

      - name: FORCE CREATE DUMMY FILES IN ALL DIRECTORIES (ENSURE GIT TRACKS THEM)
        run: |
          mkdir -p schema-files/organization
          mkdir -p schema-files/services
          mkdir -p schema-files/products
          mkdir -p schema-files/faqs
          mkdir -p schema-files/help-articles
          mkdir -p schema-files/reviews
          mkdir -p schema-files/locations
          mkdir -p schema-files/team
          mkdir -p schema-files/awards
          mkdir -p schema-files/press
          mkdir -p schema-files/case-studies
          touch schema-files/organization/.gitkeep
          touch schema-files/services/.gitkeep
          touch schema-files/products/.gitkeep
          touch schema-files/faqs/.gitkeep
          touch schema-files/help-articles/.gitkeep
          touch schema-files/reviews/.gitkeep
          touch schema-files/locations/.gitkeep
          touch schema-files/team/.gitkeep
          touch schema-files/awards/.gitkeep
          touch schema-files/press/.gitkeep
          touch schema-files/case-studies/.gitkeep

      - name: Generate or Update Sitemap (FORCE UPDATE)
        run: |
          python generate_sitemaps.py
          touch ai-sitemap.xml

      - name: Verify All Generated Files Exist
        run: |
          echo "üîç VERIFYING OUTPUTS ‚Äî Listing all generated files:"
          echo "=================================================="
          find schema-files -type f KATEX_INLINE_OPEN -name "*.json" -o -name "*.yaml" -o -name "*.md" -o -name "*.llm" KATEX_INLINE_CLOSE | sort
          echo ""
          echo "üìÑ ai-sitemap.xml last modified:"
          ls -la ai-sitemap.xml

      - name: Configure Git Identity
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Setup Remote with Token (Extra Safety)
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git

      - name: FORCE ADD AND COMMIT EVERYTHING
        run: |
          git add --all
          echo "üì¶ STAGED CHANGES:"
          git status --short
          git commit -m "ü§ñ Auto-generate schema + sitemap [$(date +'%Y-%m-%d %H:%M:%S')]" || echo "‚úÖ No changes, still pushing"
          echo "üöÄ PUSHING TO: ${{ github.ref_name }}"
          git push origin ${{ github.ref_name }}

      - name: DEBUG - Verify Push Result
        run: |
          echo "üîé Verifying latest commit on remote..."
          git fetch origin ${{ github.ref_name }}
          git log -1 origin/${{ github.ref_name }} --oneline
          echo "‚úÖ If commit above matches, SUCCESS! Files are live at Raw URLs."
